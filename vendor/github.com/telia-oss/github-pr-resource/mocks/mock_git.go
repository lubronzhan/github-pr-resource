// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telia-oss/github-pr-resource (interfaces: Git)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGit is a mock of Git interface
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockGit) Fetch(arg0 string, arg1 int) error {
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch
func (mr *MockGitMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockGit)(nil).Fetch), arg0, arg1)
}

// GitCryptUnlock mocks base method
func (m *MockGit) GitCryptUnlock(arg0 string) error {
	ret := m.ctrl.Call(m, "GitCryptUnlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitCryptUnlock indicates an expected call of GitCryptUnlock
func (mr *MockGitMockRecorder) GitCryptUnlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitCryptUnlock", reflect.TypeOf((*MockGit)(nil).GitCryptUnlock), arg0)
}

// Init mocks base method
func (m *MockGit) Init(arg0 string) error {
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockGitMockRecorder) Init(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGit)(nil).Init), arg0)
}

// Merge mocks base method
func (m *MockGit) Merge(arg0 string) error {
	ret := m.ctrl.Call(m, "Merge", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge
func (mr *MockGitMockRecorder) Merge(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockGit)(nil).Merge), arg0)
}

// Pull mocks base method
func (m *MockGit) Pull(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Pull", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull
func (mr *MockGitMockRecorder) Pull(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockGit)(nil).Pull), arg0, arg1)
}

// RevParse mocks base method
func (m *MockGit) RevParse(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "RevParse", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevParse indicates an expected call of RevParse
func (mr *MockGitMockRecorder) RevParse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevParse", reflect.TypeOf((*MockGit)(nil).RevParse), arg0)
}
